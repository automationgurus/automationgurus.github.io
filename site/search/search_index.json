{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome in Automation Bible For full documentation visit mkdocs.org . Our mission mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. { \"type\":2 } Who are we? Artur Brodzi\u0144ski Kamil Wi\u0119cek mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"#welcome-in-automation-bible","text":"For full documentation visit mkdocs.org .","title":"Welcome in Automation Bible"},{"location":"#our-mission","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. { \"type\":2 }","title":"Our mission"},{"location":"#who-are-we","text":"","title":"Who are we?"},{"location":"#artur-brodzinski","text":"","title":"Artur Brodzi\u0144ski"},{"location":"#kamil-wiecek","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Kamil Wi\u0119cek"},{"location":"about-us/","text":"","title":"About us"},{"location":"azure-devops-audit-logs-forwarding/","text":"Forward Azure DevOps Audit Logs to Log Analytics Workspace We developed an automated solution that is continuously streaming audit logs from Azure DevOps to Log Analytics Workspace. Why should you read this article? What are the benefits? You don't want to browse logs though Azure DevOps web manually. You don't want to export audit logs to CSV and analyze them in Excel. You want to have all audit logs in the same place . It sounds like your regulator, doesn't it? You'll be able to search effectively across logs, using Kusto Query Language. You want to keep audit logs for more than 90 days. You'll easily bind ADO events to other events from another part of your environment. You'll Grab details about activities like permissions changes, deleted resources, branch policy changes. If you're IaC enthusiastic , then the majority of you work in ADO. It's worth to capture events from there. What is available out of the box? Browsing logs through web portal. Exporting them to JSON/ CSV Analyze them using Excel/ custom tools. More general information about Azure DevOps Auditing is available in the link below. It's not our purpose to paraphrase MS documentation. Please read the following part of their documentation to get more details about ADO auditing in general. You can find more details here! Acronyms and abbreviations ADO - Azure DevOps ORG - Azure DevOps Organization PAT - Personal Access Token from ADO AAA - Azure Automation Account ARA - Azure Run As Account AKV - Azure Key Vault LAW - Azure Log Analytics Workspace Who are you? We assume that... PS C:\\> $You.SessionLevelReadiness -GE 200 True ... so we're not providing detailed, step by step instructions on how to create every single resource required to deploy this solution. We believe that you can deploy and configure them without additional instructions, or you're able to find them on your own. Prepare infrastructure Here are required resources and it's the configuration required to deploy the described solution: Organization in Azure DevOps with enabled auditing. Personal Access Token with read audit log events, manage and delete streams scope. Azure Automation Account with Azure Run As Account . AAA string variables named KeyVaultName, WorkspaceId, OrganizationName AAA string variable named LastAzureDevOpsSyncDate with round-trip date/time pattern value (for example 2020-01-01T00:00:00.0000001Z ) Azure Key Vault AKV Get and list secret access policy for ARA. AzureDevOpsPersonalAccessToken secret in AKV containing PAT value. Azure Log Analytics Workspace. Shared key read permissions for ARA. Azure Automation Powershell SynchronizeAzureDevOpsAuditLogs Runbook ( get it here ) Solution overview. More details. Every single hour Azure Automation Runbook (AAC) is invoked by schedule. Set context. All actions are performed in the context of Azure Run As Account . This account was created during Automation Account creation. Get parameters (read details above). Get all ADO audit logs entries between LastAzureDevOpsSyncDate and current date and time. Upload event to Log Analytics Workspace via REST API call. Update LastAzureDevOpsSyncDate . Solution parameters Script Parameter Source/ Where you should set it $KeyVaultName KeyVaultName variable from Automation Account $StartTime LastAzureDevOpsSyncDate variable from Automation Account $OrganizationName OrganizationName variable from Automation Account $CustomerId WorkspaceId variable from Automation Account $PersonAccessToken AzureDevOpsPersonalAccessToken secret from Azure KeyVault $SharedKey SharedKey property from Log Analytics Workspace (Id = $CustomerId) Powershell Runbook Get SynchronizeAzureDevOpsAuditLogsRunbook Source Code We use Build-Signature and Post-LogAnalyticsData from MS DOCS: Data collector api . In this example, they use $TimeStampField variable that is global. It isn't good practice to use in function variables defined out of function scope. We replaced that. Function Build-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource) { $xHeaders = \"x-ms-date:\" + $date $stringToHash = $method + \"`n\" + $contentLength + \"`n\" + $contentType + \"`n\" + $xHeaders + \"`n\" + $resource $bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash) $keyBytes = [Convert]::FromBase64String($sharedKey) $sha256 = New-Object System.Security.Cryptography.HMACSHA256 $sha256.Key = $keyBytes $calculatedHash = $sha256.ComputeHash($bytesToHash) $encodedHash = [Convert]::ToBase64String($calculatedHash) $authorization = 'SharedKey {0}:{1}' -f $customerId,$encodedHash return $authorization } Function Post-LogAnalyticsData($ustomerId, $sharedKey, $body, $logType) { $method = \"POST\" $contentType = \"application/json\" $resource = \"/api/logs\" $rfc1123date = [DateTime]::UtcNow.ToString(\"r\") $contentLength = $body.Length $signature = Build-Signature ` -customerId $customerId ` -sharedKey $sharedKey ` -date $rfc1123date ` -contentLength $contentLength ` -method $method ` -contentType $contentType ` -resource $resource $uri = \"https://\" + $customerId + \".ods.opinsights.azure.com\" + $resource + \"?api-version=2016-04-01\" $headers = @{ \"Authorization\" = $signature; \"Log-Type\" = $logType; \"x-ms-date\" = $rfc1123date; \"time-generated-field\" = \"timestamp\"; } $response = Invoke-WebRequest -Uri $uri -Method $method -ContentType $contentType -Headers $headers -Body $body -UseBasicParsing return $response.StatusCode } $LogType = \"AzureDevOps\" $Conn = Get-AutomationConnection -Name AzureRunAsConnection Connect-AzAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint $AzureContext = Select-AzSubscription -SubscriptionId $Conn.SubscriptionID $KeyVaultName = Get-AutomationVariable -Name KeyVaultName Write-Output -InputObject 'Get keyvault name from automation account variables - success' $OrganizationName = Get-AutomationVariable -Name OrganizationName Write-Output -InputObject 'Get Azure DevOps organization name from automation account variables - success' $CustomerId = Get-AutomationVariable -Name WorkspaceId Write-Output -InputObject 'Get Log Analytics Workspace Id from automation account variables - success' $LogAnalyticsWorkspace = Get-AzOperationalInsightsWorkspace | Where-Object -Property CustomerId -EQ $CustomerId $SharedKey = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $logAnalyticsWorkspace.ResourceGroupName -Name $logAnalyticsWorkspace.Name).PrimarySharedKey Write-Output -InputObject \"Get shared key directly from '$( $logAnalyticsWorkspace.Name ) - success\" $PersonAccessToken = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AzureDevOpsPersonalAccessToken').SecretValueText Write-Output -InputObject \"Get Personal Access Token from key vault '$( $KeyVaultName )' - success\" $StartTime = Get-AutomationVariable -Name LastAzureDevOpsSyncDate $StartTime = $StartTime.ToUniversalTime().GetDateTimeFormats(\"o\") [string]$EndTimeQuery = [DateTime]::Now.ToUniversalTime().GetDateTimeFormats(\"o\") Write-Output -InputObject \"Script will look for audi events created between $( $StartTime ) and $( $endTimeQuery )\" $Base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f 'basic',$PersonAccessToken))) $Headers = @{ Authorization = \"Basic $Base64AuthInfo\" } [array]$ApiOutputs = @() [string]$ContinuationToken = '' do { $EndpointUri = \"https://auditservice.dev.azure.com/$( $OrganizationName )/_apis/audit/auditlog?api-version=5.1-preview.1\" $EndpointUri += \"&batchSize=200\" $EndpointUri += \"&skipAggregation=true\" $EndpointUri += \"&startTime=$( $StartTime )\" $EndpointUri += \"&endTime=$( $endTimeQuery )\" if ($ContinuationToken) { $EndpointUri += \"&continuationToken=$( $continuationToken )\" } $ApiOutput = Invoke-RestMethod -Uri $endpointUri -Headers $headers -Method Get $ContinuationToken = $ApiOutput.continuationToken #tu $ApiOutputs += $ApiOutput } while ($ApiOutput.hasMore) $DecoratedAuditLogEntries = $ApiOutputs.decoratedAuditLogEntries if(-not $DecoratedAuditLogEntries) { Write-Output -InputObject 'There are no new audit logs.' return; } Write-Output -InputObject \"Found $( $DecoratedAuditLogEntries.Count ) new audit entries\" foreach ($item in $DecoratedAuditLogEntries ) { $item.data = $item.data | ConvertTo-Json -Compress -Depth 100 } $RecordsJson = $DecoratedAuditLogEntries | ` Select-Object -ExcludeProperty actorImageUrl | ` ConvertTo-Json $StatusCode = Post-LogAnalyticsData -customerId $CustomerId -sharedKey $SharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($recordsJson)) -logType $LogType if($StatusCode -eq 200){ Set-AutomationVariable -Name LastAzureDevOpsSyncDate -Value $endTimeQuery Write-Output -InputObject 'Azure DevOps audi logs successfully forwared' } It's time to rest and check what we did AzureDevOps_CL | sort by TimeGenerated desc nulls last | where actionId_s == \"Extension.Installed\" | project TimeGenerated, actionId_s, scopeDisplayName_s , details_s, actorDisplayName_s TimeGenerated actionId_s scopeDisplayName_s details_s actorDisplayName_s 2020-03-15T16:47:19.367Z Extension.Installed AutomationGuyIO (Organization) Extension \"Secure DevOps Kit (AzSK) CICD Extensions for Azure\" from publisher \"Microsoft DevLabs\" was installed - Version \"3.1.7\" Kamil Wi\u0119cek Solution development insights ARA becomes a Contributor by default. Consider changing that. Storing LAW SharedKey in AKV is one of the options, but it'll force you to update it on change. We decided to get it directly during the script execution. We could use AAA encrypted value to store PAT, but in case of storing secrets, AKV should always be the primary choice. Other parameters we don't consider as secrets, so we store them in AAA variables. Enabling Allow trusted Microsoft services to bypass this firewall in AKW Networking configuration didn't allow access from AAA. Therefore we set this setting to Allow access from all networks .","title":"Azure DevOps Audit Logs Forwarder"},{"location":"azure-devops-audit-logs-forwarding/#forward-azure-devops-audit-logs-to-log-analytics-workspace","text":"We developed an automated solution that is continuously streaming audit logs from Azure DevOps to Log Analytics Workspace.","title":"Forward Azure DevOps Audit Logs to Log Analytics Workspace"},{"location":"azure-devops-audit-logs-forwarding/#why-should-you-read-this-article-what-are-the-benefits","text":"You don't want to browse logs though Azure DevOps web manually. You don't want to export audit logs to CSV and analyze them in Excel. You want to have all audit logs in the same place . It sounds like your regulator, doesn't it? You'll be able to search effectively across logs, using Kusto Query Language. You want to keep audit logs for more than 90 days. You'll easily bind ADO events to other events from another part of your environment. You'll Grab details about activities like permissions changes, deleted resources, branch policy changes. If you're IaC enthusiastic , then the majority of you work in ADO. It's worth to capture events from there.","title":"Why should you read this article? What are the benefits?"},{"location":"azure-devops-audit-logs-forwarding/#what-is-available-out-of-the-box","text":"Browsing logs through web portal. Exporting them to JSON/ CSV Analyze them using Excel/ custom tools. More general information about Azure DevOps Auditing is available in the link below. It's not our purpose to paraphrase MS documentation. Please read the following part of their documentation to get more details about ADO auditing in general. You can find more details here!","title":"What is available out of the box?"},{"location":"azure-devops-audit-logs-forwarding/#acronyms-and-abbreviations","text":"ADO - Azure DevOps ORG - Azure DevOps Organization PAT - Personal Access Token from ADO AAA - Azure Automation Account ARA - Azure Run As Account AKV - Azure Key Vault LAW - Azure Log Analytics Workspace","title":"Acronyms and abbreviations"},{"location":"azure-devops-audit-logs-forwarding/#who-are-you","text":"We assume that... PS C:\\> $You.SessionLevelReadiness -GE 200 True ... so we're not providing detailed, step by step instructions on how to create every single resource required to deploy this solution. We believe that you can deploy and configure them without additional instructions, or you're able to find them on your own.","title":"Who are you?"},{"location":"azure-devops-audit-logs-forwarding/#prepare-infrastructure","text":"Here are required resources and it's the configuration required to deploy the described solution: Organization in Azure DevOps with enabled auditing. Personal Access Token with read audit log events, manage and delete streams scope. Azure Automation Account with Azure Run As Account . AAA string variables named KeyVaultName, WorkspaceId, OrganizationName AAA string variable named LastAzureDevOpsSyncDate with round-trip date/time pattern value (for example 2020-01-01T00:00:00.0000001Z ) Azure Key Vault AKV Get and list secret access policy for ARA. AzureDevOpsPersonalAccessToken secret in AKV containing PAT value. Azure Log Analytics Workspace. Shared key read permissions for ARA. Azure Automation Powershell SynchronizeAzureDevOpsAuditLogs Runbook ( get it here )","title":"Prepare infrastructure"},{"location":"azure-devops-audit-logs-forwarding/#solution-overview-more-details","text":"Every single hour Azure Automation Runbook (AAC) is invoked by schedule. Set context. All actions are performed in the context of Azure Run As Account . This account was created during Automation Account creation. Get parameters (read details above). Get all ADO audit logs entries between LastAzureDevOpsSyncDate and current date and time. Upload event to Log Analytics Workspace via REST API call. Update LastAzureDevOpsSyncDate .","title":"Solution overview. More details."},{"location":"azure-devops-audit-logs-forwarding/#solution-parameters","text":"Script Parameter Source/ Where you should set it $KeyVaultName KeyVaultName variable from Automation Account $StartTime LastAzureDevOpsSyncDate variable from Automation Account $OrganizationName OrganizationName variable from Automation Account $CustomerId WorkspaceId variable from Automation Account $PersonAccessToken AzureDevOpsPersonalAccessToken secret from Azure KeyVault $SharedKey SharedKey property from Log Analytics Workspace (Id = $CustomerId)","title":"Solution parameters"},{"location":"azure-devops-audit-logs-forwarding/#powershell-runbook","text":"Get SynchronizeAzureDevOpsAuditLogsRunbook Source Code We use Build-Signature and Post-LogAnalyticsData from MS DOCS: Data collector api . In this example, they use $TimeStampField variable that is global. It isn't good practice to use in function variables defined out of function scope. We replaced that. Function Build-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource) { $xHeaders = \"x-ms-date:\" + $date $stringToHash = $method + \"`n\" + $contentLength + \"`n\" + $contentType + \"`n\" + $xHeaders + \"`n\" + $resource $bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash) $keyBytes = [Convert]::FromBase64String($sharedKey) $sha256 = New-Object System.Security.Cryptography.HMACSHA256 $sha256.Key = $keyBytes $calculatedHash = $sha256.ComputeHash($bytesToHash) $encodedHash = [Convert]::ToBase64String($calculatedHash) $authorization = 'SharedKey {0}:{1}' -f $customerId,$encodedHash return $authorization } Function Post-LogAnalyticsData($ustomerId, $sharedKey, $body, $logType) { $method = \"POST\" $contentType = \"application/json\" $resource = \"/api/logs\" $rfc1123date = [DateTime]::UtcNow.ToString(\"r\") $contentLength = $body.Length $signature = Build-Signature ` -customerId $customerId ` -sharedKey $sharedKey ` -date $rfc1123date ` -contentLength $contentLength ` -method $method ` -contentType $contentType ` -resource $resource $uri = \"https://\" + $customerId + \".ods.opinsights.azure.com\" + $resource + \"?api-version=2016-04-01\" $headers = @{ \"Authorization\" = $signature; \"Log-Type\" = $logType; \"x-ms-date\" = $rfc1123date; \"time-generated-field\" = \"timestamp\"; } $response = Invoke-WebRequest -Uri $uri -Method $method -ContentType $contentType -Headers $headers -Body $body -UseBasicParsing return $response.StatusCode } $LogType = \"AzureDevOps\" $Conn = Get-AutomationConnection -Name AzureRunAsConnection Connect-AzAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint $AzureContext = Select-AzSubscription -SubscriptionId $Conn.SubscriptionID $KeyVaultName = Get-AutomationVariable -Name KeyVaultName Write-Output -InputObject 'Get keyvault name from automation account variables - success' $OrganizationName = Get-AutomationVariable -Name OrganizationName Write-Output -InputObject 'Get Azure DevOps organization name from automation account variables - success' $CustomerId = Get-AutomationVariable -Name WorkspaceId Write-Output -InputObject 'Get Log Analytics Workspace Id from automation account variables - success' $LogAnalyticsWorkspace = Get-AzOperationalInsightsWorkspace | Where-Object -Property CustomerId -EQ $CustomerId $SharedKey = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $logAnalyticsWorkspace.ResourceGroupName -Name $logAnalyticsWorkspace.Name).PrimarySharedKey Write-Output -InputObject \"Get shared key directly from '$( $logAnalyticsWorkspace.Name ) - success\" $PersonAccessToken = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name 'AzureDevOpsPersonalAccessToken').SecretValueText Write-Output -InputObject \"Get Personal Access Token from key vault '$( $KeyVaultName )' - success\" $StartTime = Get-AutomationVariable -Name LastAzureDevOpsSyncDate $StartTime = $StartTime.ToUniversalTime().GetDateTimeFormats(\"o\") [string]$EndTimeQuery = [DateTime]::Now.ToUniversalTime().GetDateTimeFormats(\"o\") Write-Output -InputObject \"Script will look for audi events created between $( $StartTime ) and $( $endTimeQuery )\" $Base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f 'basic',$PersonAccessToken))) $Headers = @{ Authorization = \"Basic $Base64AuthInfo\" } [array]$ApiOutputs = @() [string]$ContinuationToken = '' do { $EndpointUri = \"https://auditservice.dev.azure.com/$( $OrganizationName )/_apis/audit/auditlog?api-version=5.1-preview.1\" $EndpointUri += \"&batchSize=200\" $EndpointUri += \"&skipAggregation=true\" $EndpointUri += \"&startTime=$( $StartTime )\" $EndpointUri += \"&endTime=$( $endTimeQuery )\" if ($ContinuationToken) { $EndpointUri += \"&continuationToken=$( $continuationToken )\" } $ApiOutput = Invoke-RestMethod -Uri $endpointUri -Headers $headers -Method Get $ContinuationToken = $ApiOutput.continuationToken #tu $ApiOutputs += $ApiOutput } while ($ApiOutput.hasMore) $DecoratedAuditLogEntries = $ApiOutputs.decoratedAuditLogEntries if(-not $DecoratedAuditLogEntries) { Write-Output -InputObject 'There are no new audit logs.' return; } Write-Output -InputObject \"Found $( $DecoratedAuditLogEntries.Count ) new audit entries\" foreach ($item in $DecoratedAuditLogEntries ) { $item.data = $item.data | ConvertTo-Json -Compress -Depth 100 } $RecordsJson = $DecoratedAuditLogEntries | ` Select-Object -ExcludeProperty actorImageUrl | ` ConvertTo-Json $StatusCode = Post-LogAnalyticsData -customerId $CustomerId -sharedKey $SharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($recordsJson)) -logType $LogType if($StatusCode -eq 200){ Set-AutomationVariable -Name LastAzureDevOpsSyncDate -Value $endTimeQuery Write-Output -InputObject 'Azure DevOps audi logs successfully forwared' }","title":"Powershell Runbook"},{"location":"azure-devops-audit-logs-forwarding/#its-time-to-rest-and-check-what-we-did","text":"AzureDevOps_CL | sort by TimeGenerated desc nulls last | where actionId_s == \"Extension.Installed\" | project TimeGenerated, actionId_s, scopeDisplayName_s , details_s, actorDisplayName_s TimeGenerated actionId_s scopeDisplayName_s details_s actorDisplayName_s 2020-03-15T16:47:19.367Z Extension.Installed AutomationGuyIO (Organization) Extension \"Secure DevOps Kit (AzSK) CICD Extensions for Azure\" from publisher \"Microsoft DevLabs\" was installed - Version \"3.1.7\" Kamil Wi\u0119cek","title":"It's time to rest and check what we did"},{"location":"azure-devops-audit-logs-forwarding/#solution-development-insights","text":"ARA becomes a Contributor by default. Consider changing that. Storing LAW SharedKey in AKV is one of the options, but it'll force you to update it on change. We decided to get it directly during the script execution. We could use AAA encrypted value to store PAT, but in case of storing secrets, AKV should always be the primary choice. Other parameters we don't consider as secrets, so we store them in AAA variables. Enabling Allow trusted Microsoft services to bypass this firewall in AKW Networking configuration didn't allow access from AAA. Therefore we set this setting to Allow access from all networks .","title":"Solution development insights"},{"location":"worth-to-check/","text":"Welcome in Automation Bible For full documentation visit mkdocs.org . Our mission mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. { \"type\":2 } Who we are? mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Worth to check"},{"location":"worth-to-check/#welcome-in-automation-bible","text":"For full documentation visit mkdocs.org .","title":"Welcome in Automation Bible"},{"location":"worth-to-check/#our-mission","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. { \"type\":2 }","title":"Our mission"},{"location":"worth-to-check/#who-we-are","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Who we are?"}]}